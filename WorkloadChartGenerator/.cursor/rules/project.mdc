---
description: 
globs: 
alwaysApply: false
---
Правила архитектуры кода и проекта:
1) Применять принципы ООП: классы с чёткой ответственностью, инкапсуляция данных и логики.
2) Соблюдать SOLID: писать код так, чтобы каждый класс и метод имели одну зону ответственности и легко расширялись без изменения существующего кода.
3) Использовать проверенные паттерны проектирования (фабрики, стратегии, наблюдатель, построитель и т.д.) там, где они упрощают поддержку и читаемость.
4) Разделять слои приложения: слой данных (модели/репозитории), сервисный слой (бизнес-логика), слой представления/контроллеры.
5) Встроить логику конечных автоматов (FSM) в отдельные модули или классы, чётко выделяя состояния и переходы между ними.
6) Обеспечивать слабую связность между модулями: зависимости вводятся через интерфейсы или абстракции, а не «жёстко» через конкретные реализации.
7) Делать код модульным и расширяемым: новые требования должны добавляться путём создания новых классов/модулей, а не редактирования старых.
8) Использовать единые точки конфигурации (файлы настроек, константы) вместо «раскиданных» строковых значений по всему проекту.
9) стараться не сильно "множить" файлы. То есть при меобходимости (явной логической) можно расделить или если код сильно привышает 1000 строк (если файл оправданно большой, его можно не делить на несколько). Стабильно можно делать requirements, settings и при необходимости utilities


Правила написание кода:
1) К классам, методам и функциям обязательно писать англоязычные docstring, в которых:
 - кратко описано, что делает эта сущность; Для маленьких (менее 20 строк кода) достаточно предложения (где-то 10-15 слов), а для больших пара тройка предложений (30-50 слов)
 - перечислены аргументы (имя – тип – зачем нужен);
 - возвращаемое значение (имя – тип – зачем нужен).
2) При объявлении каждой переменной добавлять краткий комментарий на английском (или русском), объясняющий, зачем она нужна и какую информацию хранит.
3) Имена переменных не должны содержать сокращений: использовать понятные, самодокументируемые названия (например, user_account_balance вместо bal. acc_balance - плохо).
4) Использовать систему логирования (модуль logging) вместо прямых вызовов print() (при обработке ошибок, например).
5) Соблюдать PEP 8:
 - отступы 4 пробела, длина строк ≤ 79 символов;
 - разделять импорты стандартной библиотеки, сторонних пакетов и локальных модулей пустыми строками;
 - константы именовать CAPS_WITH_UNDERSCORES;
 - избегать «магических» чисел и строк — выносить их в именованные константы.

 6) (можно через locals()) централизованно задавать все названия полей (ключей) в одном месте — например, в виде констант или @dataclass при необходимости